{{#markdown-convert style='github'}}
# Connection
> Connecting Routes, Components, and Controllers to State and Dispatch

Your Components, Routes, and Controllers are in the need of state (initial and updates) and access to `dispatch` functionality to create state changes. If you've used Redux in React you're probably used to using the `connect()` function. Because Ember is a little more opinionated framework we'll try to do this in an easier manner in **ember-redux-core**.


### Getting Global State into Local Scope

The two requirements to getting state (or parts of state) into a read-only view in your local scope is:

1. use the `redux` mixin
1. set the `connect` property to indicate interest in parts of the state tree

Here are a few examples of how you might state interest in state:

```js
import redux from '../mixins/redux';
const myComponent = Ember.Component.extend(redux, {

  // Express interest in ALL state (by default will assign to "state" property locally)
  connect: ['.'],

  // Express interest in the "count" and "users" trees
  connect: ['count', 'users'],

  // Express interest in the "users" tree under the alias of "foobar"
  connect: ['users as foobar'],

});
```

By stating your interest your local scope will not only be initialized with state but also be kept current as state changes. To make your life marginally easier you can use the cli to create redux-ready components with:

```
ember generate redux-component [name]
```

This will create a route which looks like:

```
// app/component/[name].js
export default ReduxComponent.extend({
  layout
});
```

> a `ReduxComponent` is nothing more than a component which has included the _redux_ mixin.

### Dispatching an Action

#### The _do-it-yourself_ Approach

In many cases the best way to fire off a new Action is to handle _dispatch_ directly in your component's action handler. Doing this is as easy as:

```
export default ReduxComponent.extend(redux, {
  actions {
    add() {
      return this.get('redux').dispatch({
        type: 'ADD_SOMETHING'
      });
    }
  }
}
```

This works, but as discussed in the **Actions** section, you may want to use Action Creators to generate your dispatch messages. In this case you _can_ just import the Action Creator in your components JS and use it in your own actions:

```
import users from '../redux/actions/users';
```

However, likely the most convenient method of leveraging is in your templates where you can use the `action-creator` helper:

```hbs
&lt;button onclick=\{{action-create 'users.remove' 123 }}&gt;press me&lt;/button>
```

This will automatically reference the `users.js` action creator and call the `remove()` function off of it. The resultant string is then sent to Redux's dispatch. When this helper is combined with an addon like `ember-composable-helpers` you can create some very clear redux templates without any boilerplate needed to use the action creator.

{{/markdown-convert}}
