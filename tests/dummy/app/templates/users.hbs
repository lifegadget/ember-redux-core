{{#markdown-convert style='github'}}
# Users Demo
> Managing an array of user state

## Demo
{{/markdown-convert}}

<div class="demo users">
  {{user-table}}
  {{new-user}}
</div>
<br>

{{#markdown-convert style='github'}}
## Context

In this demo we are demonstrating the management of a array of user objects. The
Redux actions involved are:

- `USER_ADD` - adds one to the current value
- `USER_UPDATE` - adds one to the current value
- `USER_REMOVE` - subtracts one from the current state value

Also considered but eventually eliminated were:

- `USER_IS_ADDING` - toggles whether a new user is in the process of being added
- `USER_NEW` - a prospective user who's attributes are declared but not yet saved/cancelled

Similarly to the _Count_ demo we will also save off the "users" state to localStorage so that you can reload without any concern about losing this precious demo date (sarcasm intended). But what about the much more "transient" state associated with the _yet to be created_ but _partially described_ user. This state in Ember would typically be just local properties of the `new-user` component and in fact that's what we've decided for now to do. Yet ... it is state and to have full time travel capability, it may be useful to have representations of local state in the Redux store. This idea has been discussed at length in the React/Redux community here:

> [ephemeral state - issue 159](https://github.com/reactjs/redux/issues/159)

So to be clear, the point of view in `ember-redux-core` will be to _not_ interfere with the local state of a component but there is nothing wrong a composable addon(s) being developed to automatically mount and unmount local state onto the global state. This will provide users with flexibility of choice in an area that is still in discussion while defaulting to the pattern that Ember developers will be most familiar with.

Beyond the discussion of transient/ephemeral state, there are a few variations from the prior example worth calling out:

- rather than having the data management be configured on the Route we will do all our work within components.
- we have also abstracted all actions into a separate _action creator_ object called `user` (see below). This abstraction makes sense when you expect that the dispatched actions have reuse potential across components.

For those wanting to look at code while playing with the demo:

- [`app/components/user-table.js`]() and [`app/templates/components/user-table.hbs`]()
  - will subscribe to changes on the `state.users` state tree, reporting back the results in a tabular structure
  - actions at a "row level" will include _delete_ and _edit_
  - in this case we choose to use **ember-cli** to generate the component with `ember generate redux-component user-table`
      - You may notice the source extends `ember-redux-core/component/redux-component` rather than including the mixin like we did in the last example
      - Both methods are perfectly fine and functionally eqivalent
- [`app/redux/reducers/users.js`]()
  - all actions mentioned above are handled

{{/markdown-convert}}